import { getComic, getComics } from 'dh-marvel/services/marvel/marvel.service'
import { GetStaticPaths, GetStaticProps, GetStaticPropsContext, NextPage } from 'next'
import React from 'react'
import { ComicType } from 'dh-marvel/features/types/postComic.types'
import { styled } from '@mui/material/styles';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Grid from '@mui/material/Grid';
import Head from 'next/head'
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import Card from '@mui/material/Card';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import Image from 'next/image'
import AccordionCharactes from 'dh-marvel/components/accordin-characters';
import LayoutGeneral from 'dh-marvel/components/layouts/layout-general';
import { useRouter } from 'next/router';
import useOrder from 'context/useOrden';
import { selectComic } from 'context/action';

type postProps = {
    comics: ComicType[],
}

const Item = styled(Paper)(({ theme }) => ({
    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
    ...theme.typography.body2,
    padding: theme.spacing(1),
    textAlign: 'center',
    color: theme.palette.text.secondary,
}));

const detailCard: NextPage<postProps> = ({ comics }: postProps) => {

    const { state, dispatch } = useOrder();
    const router = useRouter();


    console.log(comics)

    const pruebaText = comics.description.length;
    const urlImage = `${comics.thumbnail.path}/portrait_incredible.${comics.thumbnail.extension}`;
    const price = comics.price
    const title = comics.title

    console.log(price)

    console.log(urlImage);
    const handleButton = () => {
        const comic = { img: urlImage, price, title }
        selectComic(dispatch, comic)
        router.push("/checkout")
    }


    return (
        <LayoutGeneral>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <BodySingle title={"Sample"}>
                <Box sx={{ maxWidth: 900 }} margin='10px auto'>
                    <Grid container spacing={2}>
                        <Grid item xs={12} md={6}>
                            {<Image src={urlImage} alt='Portada del comic' height={300} width={200} />}
                        </Grid>
                        <Grid item xs={12} md={6}>

                            <Card sx={{ minWidth: 275 }}>
                                <CardContent>
                                    <Typography gutterBottom variant="h5" component="div">
                                        {comics.title}
                                    </Typography>
                                    <Typography sx={{ mb: 1.5 }} color="text.secondary">
                                        antes:${comics.oldPrice}
                                    </Typography>
                                    <Typography variant="body2">
                                        ahora:${comics.price}
                                    </Typography>
                                </CardContent>
                                <CardActions>
                                    <Button variant="contained"
                                        disabled={comics.stock == 0}
                                        onClick={handleButton}

                                    >{comics.stock > 0 ? "Comprar" : "No hay stock disponible"
                                        }</Button>
                                </CardActions>
                            </Card>

                        </Grid>

                        <Grid item xs={12}>
                            <Accordion>
                                <AccordionSummary
                                    expandIcon={<ExpandMoreIcon />}
                                    aria-controls="panel1a-content"
                                    id="panel1a-header"
                                >
                                    <Typography>Descripcion</Typography>
                                </AccordionSummary>
                                <AccordionDetails>
                                    <Typography>
                                        {pruebaText > 0 ? comics.description : "No hay descripcion"}
                                    </Typography>
                                </AccordionDetails>
                            </Accordion>
                        </Grid>
                        <Grid item xs={12}>
                            <AccordionCharactes id={comics.pageCount} title="Personaje" characters={comics.characters} />
                        </Grid>
                    </Grid>
                </Box>
            </BodySingle>

        </LayoutGeneral>

    )
}

export const getStaticPaths: GetStaticPaths = async () => {
    const res = await getComics(0, 12);
    const comics: ComicType[] = await res.data.results;
    const paths = comics.map(comic => ({ params: { id: String(comic.id) } }))
    return {
        paths,
        fallback: false,
    }
}

export const getStaticProps: GetStaticProps = async ({ params }: GetStaticPropsContext<any>) => {
    const { id } = params;
    const res = await getComic(id);
    const posts: ComicType = await res

    return {
        props: { comics: posts }

    }
}




export default detailCard


/*
---------ejemplo clase 1 ruta dimanica------------
export const getStaticPaths: GetStaticPaths = async()=>{
  const res = await fetch(`https://api.punkapi.com/v2/beers`)
  const data: Beer[] = await res.json()

  const paths = data.map(beer => ({params: {id: String(beer.id)}}))
  return{
    paths, 
    fallback: false
  }
}
function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}

export default Page

export const getStaticProps: GetStaticProps = async(context)=>{
  const {params} = context

  const res = await fetch(`https://api.punkapi.com/v2/beers/${params?.id}`)
  const data: Beer = (await res.json())[0]

  return {
    props: {
      data
    }
  }
} */